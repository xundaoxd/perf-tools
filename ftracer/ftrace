#!/usr/bin/env bash
set -e

self_dir=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)
.   "$self_dir/common"


opt_tracefs="/sys/kernel/debug/tracing"
opt_args=()
opt_duration=

do_help() {
    echo "usage ftrace  [--ls-event] [--ls-filter] [--ls-tracer]"
    echo "              [--inspect-event event]"
    echo "              [--duration | -d duration]"
    echo "              [--tracer | -t t [-f filter]]"
    echo "              [--kprobe | -k k]"
    echo "              [--uprobe | -u u]"
    echo "              [--event | -e e [-f filter]]"
    echo "              [-h|--help]"
    echo "              [--tracefs dir]"
}

# -t|--tracer tracer -f filter ...
do_tracer() {
    if ((${#opt_args[@]} < 2)); then
        die "broken event tracer "
    fi
    local tracer="${opt_args[1]}"
    opt_args=("${opt_args[@]:2}")

    while ((${#opt_args[@]})); do
        case ${opt_args[0]} in
            -f | --filter)
                echo "${opt_args[1]}" >> "$opt_tracefs/set_ftrace_filter"
                run_atexit "echo !${opt_args[1]} >> $opt_tracefs/set_ftrace_filter"
                opt_args=("${opt_args[@]:2}")
                ;;
            *)
                break
                ;;
        esac
    done

    echo "$tracer" > "$opt_tracefs/current_tracer"
    run_atexit "echo nop > '$opt_tracefs/current_tracer'"
}

# -k|--kprobe 'p:myopen do_sys_open filename=+0(%si):string'
do_kprobe() {
    if ((${#opt_args[@]} < 2)); then
        die "broken kprobe opt_args"
    fi
    local -a kprobe
    read -r -a kprobe <<< "${opt_args[1]}"
    opt_args=("${opt_args[@]:2}")

    echo "${kprobe[*]}" >> "$opt_tracefs/kprobe_events"
    run_atexit "echo -:${kprobe[0]#*:} >> $opt_tracefs/kprobe_events"
}

# -u|--uprobe 'p:asd /bin/bash:0x4245c0'
do_uprobe() {
    if ((${#opt_args[@]} < 2)); then
        die "broken uprobe opt_args"
    fi
    local -a uprobe
    read -r -a uprobe <<< "${opt_args[1]}"
    opt_args=("${opt_args[@]:2}")
    if [[ "${uprobe[1]#*:}" != 0x* ]]; then
        local -a prog
        IFS=":" read -r -a prog <<< "${uprobe[1]}"
        prog[1]="$(get_sym_addr "${prog[0]}" "${prog[1]}")"
        IFS=":" uprobe[1]="${prog[*]}"
    fi

    echo "${uprobe[*]}" >> "$opt_tracefs/uprobe_events"
    run_atexit "echo -:${uprobe[0]#*:} >> $opt_tracefs/uprobe_events"
}

# -e|--event 'kmem:mm_page_alloc' -f filter ...
do_event() {
    if ((${#opt_args[@]} < 2)); then
        die "broken event opt_args"
    fi
    local event="${opt_args[1]}"
    local epath="${event//://}"
    opt_args=("${opt_args[@]:2}")

    while ((${#opt_args[@]})); do
        case ${opt_args[0]} in
            -f | --filter)
                echo "${opt_args[1]}" > "$opt_tracefs/events/$epath/filter"
                run_atexit "echo 0 > $opt_tracefs/events/$epath/filter"
                opt_args=("${opt_args[@]:2}")
                ;;
            *)
                break
                ;;
        esac
    done

    echo "$event" >> "$opt_tracefs/set_event"
    run_atexit "echo '!$event' >> $opt_tracefs/set_event"
}

main() {
    opt_args=("$@")
    while ((${#opt_args[@]})); do
        case ${opt_args[0]} in
            -h | --help)
                do_help
                exit
                ;;
            --tracefs)
                opt_tracefs="${opt_args[1]}"
                opt_args=("${opt_args[@]:2}")
                ;;
            --ls-event)
                cat "$opt_tracefs/available_events"
                opt_args=("${opt_args[@]:1}")
                exit
                ;;
            --ls-filter)
                cat "$opt_tracefs/available_filter_functions"
                opt_args=("${opt_args[@]:1}")
                exit
                ;;
            --ls-tracer)
                cat "$opt_tracefs/available_tracers"
                opt_args=("${opt_args[@]:1}")
                exit
                ;;
            --inspect-event)
                local event="${opt_args[1]}"
                local epath="${event//://}"
                cat "$opt_tracefs/events/$epath/format"
                opt_args=("${opt_args[@]:2}")
                exit
                ;;
            -d | --duration)
                opt_duration="${opt_args[1]}"
                opt_args=("${opt_args[@]:2}")
                ;;
            -t | --tracer)
                do_tracer
                ;;
            -k | --kprobe)
                do_kprobe
                ;;
            -u | --uprobe)
                do_uprobe
                ;;
            -e | --event)
                do_event
                ;;
            *)
                break;
                ;;
        esac
    done

    echo 1 > "$opt_tracefs/tracing_on"
    run_atexit "echo 0 > $opt_tracefs/tracing_on"
    if [[ -n "${opt_duration}" ]]; then
        run_atexit "cat '$opt_tracefs/trace'"
        sleep "${opt_duration}"
    else
        cat "$opt_tracefs/trace_pipe"
    fi
}


main "$@"

